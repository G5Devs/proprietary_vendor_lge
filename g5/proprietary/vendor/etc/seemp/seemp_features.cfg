version 1.0.0;

//feature Comm_Rate[BF]: volume_rate
feature Comm1[BF]: volume_rate
    action add_to_volume_rate_from_len:
        kernel::sendto;
    action add_to_volume_rate_from_size:
        kernel::recvfrom;

//feature Comm_Instantaneous[BF]: volume_instantaneous[1]
feature Comm2[BF]: volume_instantaneous[1]
    action add_to_volume_instantaneous_from_len:
        kernel::sendto;
    action add_to_volume_instantaneous_from_size:
        kernel::recvfrom;

//feature UserInteraction[BF]: amount
feature AccessUI[BF]: amount
    action increment_amount:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;

//feature DeviceInfoNeutral[BF]: amount
feature AccessAndroidID1[BF]: amount
    action increment_amount:
        android.provider.Settings::get<ANDROID_ID>;

//feature DeviceInfo[BF]: amount
feature AccessDeviceInfo1[BF]: amount
    action increment_amount:
        TelephonyManager::getDeviceId;

//feature DeviceInfoPhoneNumber[BF]: amount
feature AccessPhoneNumber1[BF]: amount
    action increment_amount:
        TelephonyManager::getLine1Number;

//feature CallMetaInfo[BF]: amount
feature AccessPhoneMeta1[BF]: amount
    action increment_amount:
        Telephony::query;
        CallerInfo::getCallerId, getCallerInfo;
    action increment_amount_by_parameter_string_cmp("content://call_log/"):
        ContentResolver::query;

//feature UserAccount[BF]: existence
feature AccessUserAccount1[BF]: existence
    action set_flag:
        AccountManagerService::getPassword, getUserData, addAccount, removeAccount,
              setPassword, clearPassword, setUserData, editProperties;
        AccountManager::getPassword, getUserData, addAccountExplicitly, removeAccount,
              setPassword, clearPassword, setUserData, addAccount, editProperties, doWork;

//feature NoUserInteractionBeforeUserAccount[BF]: order_with_lag[1]
feature AccessUserAccount2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        AccountManagerService::getPassword, getUserData, addAccount, removeAccount,
              setPassword, clearPassword, setUserData, editProperties;
        AccountManager::getPassword, getUserData, addAccountExplicitly, removeAccount,
              setPassword, clearPassword, setUserData, addAccount, editProperties, doWork;

//feature BrowserInfo[BF]: existence
feature AccessBrowserInfo1[BF]: existence
    action set_flag:
        Browser::getAllBookmarks, getAllVisitedUrls, getVisitedLike, getVisitedHistory,
              requestAllIcons;
    action set_flag_by_parameter_string_cmp("content://browser/"):
        ContentResolver::query;
    action set_flag_by_parameter_string_cmp("content://com.android.browser/"):
        ContentResolver::query;

//feature NoUserInteractionBeforeBrowserInfo[BF]: order_with_lag[1]
feature AccessBrowserInfo2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        Browser::getAllBookmarks, getAllVisitedUrls, getVisitedLike, getVisitedHistory,
              requestAllIcons;
    action handle_event_by_parameter_string_cmp("content://browser/"):
        ContentResolver::query;
    action handle_event_by_parameter_string_cmp("content://com.android.browser/"):
        ContentResolver::query;

//feature InstallShortcut[BF]: amount
feature InstallShortcut1[BF]: amount
    action increment_amount_by_parameter_string_cmp("favicon="):
    // no reason to distinguish between shortcuts and browser bookmarks
        ContentResolver::insert;

//feature NoUserInteractionBeforeInstallShortcut[BF]: order_with_lag[1]
feature InstallShortcut2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event_by_parameter_string_cmp("favicon="):
        ContentResolver::insert;

//feature Calendar[BF]: existence
feature AccessOrWriteCalendar1[BF]: existence
    action set_flag:
        CalendarContract::insert, alarmExists, findNextAlarmTime, query;

//feature NoUserInteractionBeforeInsertCalendar[BF]: order_with_lag[1]
feature AccessOrWriteCalendar2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        CalendarContract::insert;

//feature Location[BF]: amount
feature AccessLocation1[BF]: amount
    action increment_amount:
        LocationManager::_requestLocationUpdates, addGpsStatusListener, addNmeaListener,
              addProximityAlert, getLastKnownLocation,
              requestLocationUpdates, sendExtraCommand;
        TelephonyManager::getCellLocation, getNeighboringCellInfo;
        GeolocationService::registerForLocationUpdates,
              setEnableGps, start;
        WebChromeClient::onGeolocationPermissionsShowPrompt;
        WifiManager::getScanResults;

//feature NFC[BF]: amount
feature AccessNFC1[BF]: amount
// TODO: add update handlers for Feature_NFC

//feature Bluetooth[BF]: amount
feature AccessBluetooth1[BF]: amount
    action increment_amount:
        android.bluetooth.BluetoothAdapter::enable, disable, startDiscovery,
              listenUsingInsecureRfcommWithServiceRecord, listenUsingSecureRfcommWithServiceRecord,
              getBondedDevices, getRemoteDevice, getState, getProfileConnectionState;

//feature CameraPhoto[BF]: amount
feature AccessPhotoCamera1[BF]: amount
    action increment_amount:
        Camera::takePicture, setPreviewCallback, setPreviewCallbackWithBuffer, setOneShotPreviewCallback;

//feature CameraPhotoComm[BF]: order
feature ProcessPhoto1[BF]: order
    action move_to_first:
        Camera::takePicture, setPreviewCallback, setPreviewCallbackWithBuffer, setOneShotPreviewCallback;
    action move_to_second:
        kernel::sendto[1024];

//feature NoUserInteractionBeforeCameraPhoto[BF]: order_with_lag[15]
feature AccessPhotoCamera2[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        Camera::takePicture;

//feature NoUserInteractionBeforeCameraPhotoComm[BF]: order_no_ui_lag[15]
feature ProcessPhoto2[BF]: order_no_ui_lag[15]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action move_to_first_no_ui:
        Camera::takePicture;
    action move_to_second_no_ui:
        kernel::sendto[1024];

// TODO: change Feature_CameraVideo to track duration of videos
//       The Feature 2[BF]: Cumulative length of video recording
/* TODO: issue BVs every second after start. This will be stopped once a stop is seen */
// TODO: Video communication - If the number of bytes < THRESH then it is a false positive... ignore
//feature CameraVideo[BF]: amount
feature AccessVideoCamera1[BF]: amount
    action increment_amount:
        android_media_MediaRecorder::start;
//      android_media_MediaRecorder::stop;

//feature CameraVideoComm[BF]: order
feature ProcessVideo1[BF]: order
    action move_to_first:
        android_media_MediaRecorder::start;
    action move_to_second:
        kernel::sendto[1024];

//feature NoUserInteractionBeforeCameraVideo[BF]: order_with_lag[15]
feature AccessVideoCamera2[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        android_media_MediaRecorder::start;

//feature NoUserInteractionBeforeCameraVideoComm[BF]: order_no_ui_lag[15]
feature ProcessVideo2[BF]: order_no_ui_lag[15]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action move_to_first_no_ui:
        android_media_MediaRecorder::start;
    action move_to_second_no_ui:
        kernel::sendto[1024];

/* TODO: change to cumulative length of audio recording */
/* TODO: issue BVs every second after startRecording. This will be stopped once a stop is seen */
//feature RecordAudio[BF]: existence
feature AccessMicrophone1[BF]: existence
    action set_flag:
        AudioRecord::startRecording;
        AudioRecord::start;
//      AudioRecord::stop;
        SpeechRecognizer::startListening;

//feature RecordAudioComm[BF]: order
feature ProcessMicrophoneData1[BF]: order
    action move_to_first:
        AudioRecord::startRecording;
        AudioRecord::start;
//      AudioRecord::stop;
        SpeechRecognizer::startListening;
    action move_to_second:
        kernel::sendto[1024];

//feature NoUserInteractionBeforeRecordAudio[BF]: order_with_lag[15]
feature AccessMicrophone2[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        AudioRecord::startRecording;
        AudioRecord::start;
//      AudioRecord::stop;
        SpeechRecognizer::startListening;

//feature NoUserInteractionBeforeRecordAudioComm[BF]: order_no_ui_lag[15]
feature ProcessMicrophoneData2[BF]: order_no_ui_lag[15]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action move_to_first_no_ui:
        AudioRecord::startRecording;
        AudioRecord::start;
//      AudioRecord::stop;
        SpeechRecognizer::startListening;
    action move_to_second_no_ui:
        kernel::sendto[8];

//feature SendSMS[BF]: amount
feature WriteSMS1[BF]: amount
    action increment_amount:
        android.telephony.SmsManager::sendDataMessage, sendMultipartTextMessage, sendTextMessage;
        android.telephony.gsm.SmsManager::sendDataMessage, sendMultipartTextMessage, sendTextMessage;

//feature NoUserInteractionBeforeSendSMS[BF]: order_with_lag[1]
feature WriteSMS2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        android.telephony.SmsManager::sendDataMessage, sendMultipartTextMessage, sendTextMessage;
        android.telephony.gsm.SmsManager::sendDataMessage, sendMultipartTextMessage, sendTextMessage;

// TODO: hook the SMS_DELIVER_ACTION and SMS_RECEIVED_ACTION intents
//feature ReadSMS[BF]: amount
feature AccessSMS1[BF]: amount
    action increment_amount:
        android.telephony.SmsManager::copyMessageToIcc, deleteMessageFromIcc, updateMessageOnIcc;
        android.telephony.gsm.SmsManager::copyMessageToSim, deleteMessageFromSim, updateMessageOnSim, getAllMessagesFromSim;
    action increment_amount_by_parameter_string_cmp("content://mms-sms/"):
        ContentResolver::query;
    action increment_amount_by_parameter_string_cmp("content://sms/"):
        ContentResolver::query;

//feature NoUserInteractionBeforeReadSMS[BF]: order_with_lag[1]
feature AccessSMS2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        android.telephony.SmsManager::copyMessageToIcc, deleteMessageFromIcc, updateMessageOnIcc;
        android.telephony.gsm.SmsManager::copyMessageToSim, deleteMessageFromSim, updateMessageOnSim, getAllMessagesFromSim;
    action handle_event_by_parameter_string_cmp("content://mms-sms/"):
        ContentResolver::query;
    action handle_event_by_parameter_string_cmp("content://sms/"):
        ContentResolver::query;

//feature Accelerometer[BF]: amount
feature Reserved1[BF]: amount
    //action increment_amount:
    //    android.hardware.SensorEventListener::onAccuracyChanged<ACCELEROMETER>, onSensorChanged<ACCELEROMETER>;
    //    SensorManager::registerListener;
    //    ASensorEventQueue::enableSensor;

//feature ReceiveMMS[BF]: amount
feature AccessMMS1[BF]: amount
// TODO: implement update handlers for Feature_ReceiveMMS
//       by hooking the WAP_PUSH_DELIVER_ACTION intent
    action increment_amount_by_parameter_string_cmp("content://mms-sms/"):
        ContentResolver::query;
    action increment_amount_by_parameter_string_cmp("content://mms/"):
        ContentResolver::query;

//feature NoUserInteractionBeforeReceiveMMS[BF]: order_with_lag[1]
feature AccessMMS2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event_by_parameter_string_cmp("content://mms/"):
        ContentResolver::query;

//feature ContactList[BF]: amount
feature AccessContact1[BF]: amount
    action increment_amount:
        ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;
    action increment_amount_by_parameter_string_cmp("content://contacts/"):
        ContentResolver::query;
    action increment_amount_by_parameter_string_cmp("content://com.android.contacts/"):
        ContentResolver::query;

//feature NoUserInteractionBeforeContactList[BF]: order_with_lag[1]
feature AccessContact2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;
    action handle_event_by_parameter_string_cmp("content://contacts/"):
        ContentResolver::query;
    action handle_event_by_parameter_string_cmp("content://com.android.contacts/"):
        ContentResolver::query;

//feature Installation[BF]: existence
feature Installation1[BF]: existence
    action set_flag:
        PackageManagerService::installPackage;

//feature NoUserInteractionBeforeInstallation[BF]: order_with_lag[1]
feature Installation2[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        PackageManagerService::installPackage;

//feature DeviceIdNeutralComm[BF]: order
feature ProcessAndroidID1[BF]: order
    action move_to_first:
        android.provider.Settings::get<ANDROID_ID>;
    action move_to_second:
        kernel::sendto[8];

//feature DeviceIdComm[BF]: heuristic_or_objmatching
feature ProcessDeviceInfo1[BF]: heuristic_or_objmatching
    action h_move_to_first:
        TelephonyManager::getDeviceId;
    action h_move_to_second:
        kernel::sendto[8];
    action obj_move_to_third:
        URL::openConnection;
        URI::URI;
        HttpGet::HttpGet;
        HttpPut::HttpPut;
        HttpPost::HttpPost;

//feature DeviceIdPhoneNumberComm[BF]: heuristic_or_objmatching
feature ProcessPhoneNumber1[BF]: heuristic_or_objmatching
    action h_move_to_first:
        TelephonyManager::getLine1Number;
    action h_move_to_second:
        kernel::sendto[8];
    action obj_move_to_third:
        URL::openConnection;
        URI::URI;
        HttpGet::HttpGet;
        HttpPut::HttpPut;
        HttpPost::HttpPost;

//feature UserAccountComm[BF]: order
feature ProcessUserAccount1[BF]: order
    action move_to_first:
        AccountManagerService::getPassword, getUserData, addAccount, removeAccount,
              setPassword, clearPassword, setUserData, editProperties;
        AccountManager::getPassword, getUserData, addAccountExplicitly, removeAccount,
              setPassword, clearPassword, setUserData, addAccount, editProperties, doWork;
    action move_to_second:
        kernel::sendto[8];

//feature BrowserContentComm[BF]: order
feature ProcessBrowserInfo1[BF]: order
    action move_to_first:
        Browser::getAllBookmarks, getAllVisitedUrls, getVisitedLike, getVisitedHistory,
              requestAllIcons;
    action move_to_first_by_parameter_string_cmp("content://browser/"):
        ContentResolver::query;
    action move_to_first_by_parameter_string_cmp("content://com.android.browser/"):
        ContentResolver::query;
    action move_to_second:
        kernel::sendto[8];

//feature NoUserInteractionBeforeBrowserContentComm[BF]: order_no_ui_lag[1]
feature ProcessBrowserInfo2[BF]: order_no_ui_lag[1]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action move_to_first_no_ui:
        Browser::getAllBookmarks, getAllVisitedUrls, getVisitedLike, getVisitedHistory,
              requestAllIcons;
    action move_to_first_no_ui_by_parameter_string_cmp("content://browser/"):
        ContentResolver::query;
    action move_to_first_no_ui_by_parameter_string_cmp("content://com.android.browser/"):
        ContentResolver::query;
    action move_to_second_no_ui:
        kernel::sendto[8];

//feature CalendarComm[BF]: order
feature ProcessCalendarInfo1[BF]: order
    action move_to_first:
        CalendarContract::insert, alarmExists, findNextAlarmTime, query;
    action move_to_second:
        kernel::sendto[8];

//feature LocationComm_Rate[BF]: order_rate
feature ProcessLocationInfo1[BF]: order_rate
    action move_to_first_rate:
        LocationManager::_requestLocationUpdates, addGpsStatusListener, addNmeaListener,
              addProximityAlert, getLastKnownLocation,
              requestLocationUpdates, sendExtraCommand;
        TelephonyManager::getCellLocation, getNeighboringCellInfo;
        GeolocationService::registerForLocationUpdates,
              setEnableGps, start;
        WebChromeClient::onGeolocationPermissionsShowPrompt;
        WifiManager::getScanResults;
    action move_to_second_rate:
        kernel::sendto[8];

//feature LocationComm_Instantaneous[BF]: order_instantaneous[60]
feature ProcessLocationInfo2[BF]: order_instantaneous[60]
    action move_to_first_instantaneous:
        LocationManager::_requestLocationUpdates, addGpsStatusListener, addNmeaListener,
              addProximityAlert, getLastKnownLocation,
              requestLocationUpdates, sendExtraCommand;
        TelephonyManager::getCellLocation, getNeighboringCellInfo;
        GeolocationService::registerForLocationUpdates,
              setEnableGps, start;
        WebChromeClient::onGeolocationPermissionsShowPrompt;
        WifiManager::getScanResults;
    action move_to_second_instantaneous:
        kernel::sendto[8];

//feature AccelerometerComm[BF]: order
feature Reserved2[BF]: existence // order
    action set_flag:
        View::onTouchEvent; // [dbg]
    //action move_to_first:
    //    android.hardware.SensorEventListener::onAccuracyChanged<ACCELEROMETER>, onSensorChanged<ACCELEROMETER>;
    //action move_to_second:
    //    kernel::sendto[8];

//feature ContactListComm[BF]: order
feature ProcessContact1[BF]: order
    action move_to_first:
        ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;
    action move_to_first_by_parameter_string_cmp("content://contacts/"):
        ContentResolver::query;
    action move_to_first_by_parameter_string_cmp("content://com.android.contacts/"):
        ContentResolver::query;
    action move_to_second:
        kernel::sendto[8];

//feature NoUserInteractionBeforeContactListComm[BF]: order_no_ui_lag[1]
feature ProcessContact2[BF]: order_no_ui_lag[1]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action move_to_first_no_ui:
        ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;
    action move_to_first_no_ui_by_parameter_string_cmp("content://contacts/"):
        ContentResolver::query;
    action move_to_first_no_ui_by_parameter_string_cmp("content://com.android.contacts/"):
        ContentResolver::query;
    action move_to_second_no_ui:
        kernel::sendto[8];

//feature CompassComm[BF]: order
feature Reserved3[BF]: existence // order
    action set_flag:
        View::onTouchEvent; // [dbg]
    //action move_to_first:
    //    android.hardware.SensorEventListener::onAccuracyChanged<ORIENTATION>, onSensorChanged<ORIENTATION>;
    //action move_to_second:
    //    kernel::sendto[8];

//feature GyroscopeComm[BF]: order
feature Reserved4[BF]: existence // order
    action set_flag:
        View::onTouchEvent; // [dbg]
    //    android.hardware.SensorEventListener::onAccuracyChanged<ORIENTATION>, onSensorChanged<ORIENTATION>;
    //action move_to_second:
    //    kernel::sendto[8];

//feature ReadRotationSettings[BF]: existence
feature AccessRotationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ACCELEROMETER_ROTATION>, get<USER_ROTATION>;

//feature ReadDebugSettings[BF]: existence
feature AccessDebugSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ADB_ENABLED>, get<DEBUG_APP>, get<WAIT_FOR_DEBUGGER>;

//feature ReadAirplaneModeSettings[BF]: existence
feature AccessAirplaneModeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<AIRPLANE_MODE_ON>, get<AIRPLANE_MODE_RADIOS>;

//feature ReadAlarmSettings[BF]: existence
feature AccessAlarmSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ALARM_ALERT>, get<NEXT_ALARM_FORMATTED>;

//feature ReadRuntimeSettings[BF]: existence
feature AccessRuntimeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ALWAYS_FINISH_ACTIVITIES>;

//feature ReadDeviceIdSettings[BF]: existence
feature AccessDeviceIdSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ANDROID_ID>, get<LOGGING_ID>;

//feature ReadUISettings[BF]: existence
feature AccessUISettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ANIMATOR_DURATION_SCALE>, get<WINDOW_ANIMATION_SCALE>,
              get<FONT_SCALE>, get<SCREEN_BRIGHTNESS>, get<SCREEN_BRIGHTNESS_MODE>, get<SCREEN_BRIGHTNESS_MODE_AUTOMATIC>,
              get<SCREEN_BRIGHTNESS_MODE_MANUAL>, get<SCREEN_OFF_TIMEOUT>, get<DIM_SCREEN>, get<TRANSITION_ANIMATION_SCALE>,
              get<STAY_ON_WHILE_PLUGGED_IN>, get<WALLPAPER_ACTIVITY>, get<SHOW_PROCESSES>, get<SHOW_WEB_SUGGESTIONS>,
              get<SHOW_GTALK_SERVICE_STATUS>, get<USE_GOOGLE_MAIL>;

//feature ReadDateTimeSettings[BF]: existence
feature AccessDateTimeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<AUTO_TIME>, get<AUTO_TIME_ZONE>, get<DATE_FORMAT>,
              get<TIME_12_24>;

//feature ReadBluetoothSettings[BF]: existence
feature AccessBluetoothSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<BLUETOOTH_DISCOVERABILITY>, get<BLUETOOTH_DISCOVERABILITY_TIMEOUT>,
              get<BLUETOOTH_ON>;

//feature ReadDeviceInitializationSettings[BF]: existence
feature AccessDeviceInitializationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<DEVICE_PROVISIONED>, get<SETUP_WIZARD_HAS_RUN>;

//feature ReadDialerSettings[BF]: existence
feature AccessDialerSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<DTMF_TONE_WHEN_DIALING>, get<END_BUTTON_BEHAVIOR>,
              get<RINGTONE>, get<MODE_RINGER>;

//feature ReadAppMarketSettings[BF]: existence
feature AccessAppMarketSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<INSTALL_NON_MARKET_APPS>;

//feature ReadLocationSettings[BF]: existence
feature AccessLocationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<LOCATION_PROVIDERS_ALLOWED>;

//feature ReadScreenLockSettings[BF]: existence
feature AccessScreenLockSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<LOCK_PATTERN_ENABLED>, get<LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED>,
              get<LOCK_PATTERN_VISIBLE>;

//feature ReadNetworkSettings[BF]: existence
feature AccessNetworkSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<NETWORK_PREFERENCE>, get<DATA_ROAMING>, get<HTTP_PROXY>;

//feature ReadParentalControlSettings[BF]: existence
feature AccessParentalControlSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<PARENTAL_CONTROL_ENABLED>, get<PARENTAL_CONTROL_LAST_UPDATE>,
              get<PARENTAL_CONTROL_REDIRECT_URL>;

//feature ReadRadioSettings[BF]: existence
feature AccessRadioSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<RADIO_BLUETOOTH>, get<RADIO_CELL>, get<RADIO_NFC>,
              get<RADIO_WIFI>;

//feature ReadOtherSettings[BF]: existence
feature AccessOtherSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<SYS_PROP_SETTING_VERSION>, get<SETTINGS_CLASSNAME>;

//feature ReadTextEntrySettings[BF]: existence
feature AccessTextEntrySettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<TEXT_AUTO_CAPS>, get<TEXT_AUTO_PUNCTUATE>, get<TEXT_AUTO_REPLACE>,
              get<TEXT_SHOW_PASSWORD>;

//feature ReadStorageSettigs[BF]: existence
feature AccessStorageSettigs[BF]: existence
    action set_flag:
        android.provider.Settings::get<USB_MASS_STORAGE_ENABLED>;

//feature ReadVibrateSettings[BF]: existence
feature AccessVibrateSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<VIBRATE_ON>, get<HAPTIC_FEEDBACK_ENABLED>;

//feature ReadAudioSettings[BF]: existence
feature AccessAudioSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<VOLUME_ALARM>, get<VOLUME_BLUETOOTH_SCO>, get<VOLUME_MUSIC>,
              get<VOLUME_NOTIFICATION>, get<VOLUME_RING>, get<VOLUME_SYSTEM>, get<VOLUME_VOICE>, get<SOUND_EFFECTS_ENABLED>,
              get<MODE_RINGER_STREAMS_AFFECTED>, get<MUTE_STREAMS_AFFECTED>, get<NOTIFICATION_SOUND>,
              get<APPEND_FOR_LAST_AUDIBLE>;

//feature ReadWifiSettings[BF]: existence
feature AccessWifiSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<WIFI_MAX_DHCP_RETRY_COUNT>, get<WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS>,
              get<WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON>, get<WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY>,
              get<WIFI_NUM_OPEN_NETWORKS_KEPT>, get<WIFI_ON>, get<WIFI_SLEEP_POLICY>, get<WIFI_SLEEP_POLICY_DEFAULT>,
              get<WIFI_SLEEP_POLICY_NEVER>, get<WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED>, get<WIFI_STATIC_DNS1>,
              get<WIFI_STATIC_DNS2>, get<WIFI_STATIC_GATEWAY>, get<WIFI_STATIC_IP>, get<WIFI_STATIC_NETMASK>,
              get<WIFI_USE_STATIC_IP>, get<WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE>, get<WIFI_WATCHDOG_AP_COUNT>,
              get<WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS>, get<WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED>,
              get<WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS>, get<WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT>,
              get<WIFI_WATCHDOG_MAX_AP_CHECKS>, get<WIFI_WATCHDOG_ON>, get<WIFI_WATCHDOG_PING_COUNT>,
              get<WIFI_WATCHDOG_PING_DELAY_MS>, get<WIFI_WATCHDOG_PING_TIMEOUT_MS>;

//feature WriteRotationSettings[BF]: existence
feature WriteRotationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ACCELEROMETER_ROTATION>, put<USER_ROTATION>;

//feature WriteDebugSettings[BF]: existence
feature WriteDebugSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ADB_ENABLED>, put<DEBUG_APP>, put<WAIT_FOR_DEBUGGER>;

//feature WriteAirplaneModeSettings[BF]: existence
feature WriteAirplaneModeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<AIRPLANE_MODE_ON>, put<AIRPLANE_MODE_RADIOS>;

//feature WriteAlarmSettings[BF]: existence
feature WriteAlarmSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ALARM_ALERT>, put<NEXT_ALARM_FORMATTED>;

//feature WriteRuntimeSettings[BF]: existence
feature WriteRuntimeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ALWAYS_FINISH_ACTIVITIES>;

//feature WriteDeviceIdSettings[BF]: existence
feature WriteDeviceIdSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ANDROID_ID>, put<LOGGING_ID>;

//feature WriteUISettings[BF]: existence
feature WriteUISettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ANIMATOR_DURATION_SCALE>, put<WINDOW_ANIMATION_SCALE>,
              put<FONT_SCALE>, put<SCREEN_BRIGHTNESS>, put<SCREEN_BRIGHTNESS_MODE>, put<SCREEN_BRIGHTNESS_MODE_AUTOMATIC>,
              put<SCREEN_BRIGHTNESS_MODE_MANUAL>, put<SCREEN_OFF_TIMEOUT>, put<DIM_SCREEN>, put<TRANSITION_ANIMATION_SCALE>,
              put<STAY_ON_WHILE_PLUGGED_IN>, put<WALLPAPER_ACTIVITY>, put<SHOW_PROCESSES>, put<SHOW_WEB_SUGGESTIONS>,
              put<SHOW_GTALK_SERVICE_STATUS>, put<USE_GOOGLE_MAIL>;

//feature WriteDateTimeSettings[BF]: existence
feature WriteDateTimeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<AUTO_TIME>, put<AUTO_TIME_ZONE>, put<DATE_FORMAT>,
              put<TIME_12_24>;

//feature WriteBluetoothSettings[BF]: existence
feature WriteBluetoothSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<BLUETOOTH_DISCOVERABILITY>, put<BLUETOOTH_DISCOVERABILITY_TIMEOUT>,
              put<BLUETOOTH_ON>;

//feature WriteDeviceInitializationSettings[BF]: existence
feature WriteDeviceInitializationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<DEVICE_PROVISIONED>, put<SETUP_WIZARD_HAS_RUN>;

//feature WriteDialerSettings[BF]: existence
feature WriteDialerSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<DTMF_TONE_WHEN_DIALING>, put<END_BUTTON_BEHAVIOR>,
              put<RINGTONE>, put<MODE_RINGER>;

//feature WriteAppMarketSettings[BF]: existence
feature WriteAppMarketSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<INSTALL_NON_MARKET_APPS>;

//feature WriteLocationSettings[BF]: existence
feature WriteLocationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<LOCATION_PROVIDERS_ALLOWED>;

//feature WriteScreenLockSettings[BF]: existence
feature WriteScreenLockSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<LOCK_PATTERN_ENABLED>, put<LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED>,
              put<LOCK_PATTERN_VISIBLE>;

//feature WriteNetworkSettings[BF]: existence
feature WriteNetworkSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<NETWORK_PREFERENCE>, put<DATA_ROAMING>, put<HTTP_PROXY>;

//feature WriteParentalControlSettings[BF]: existence
feature WriteParentalControlSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<PARENTAL_CONTROL_ENABLED>, put<PARENTAL_CONTROL_LAST_UPDATE>,
              put<PARENTAL_CONTROL_REDIRECT_URL>;

//feature WriteRadioSettings[BF]: existence
feature WriteRadioSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<RADIO_BLUETOOTH>, put<RADIO_CELL>, put<RADIO_NFC>,
              put<RADIO_WIFI>;

//feature WriteOtherSettings[BF]: existence
feature WriteOtherSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<SYS_PROP_SETTING_VERSION>, put<SETTINGS_CLASSNAME>;

//feature WriteTextEntrySettings[BF]: existence
feature WriteTextEntrySettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<TEXT_AUTO_CAPS>, put<TEXT_AUTO_PUNCTUATE>, put<TEXT_AUTO_REPLACE>,
              put<TEXT_SHOW_PASSWORD>;

//feature WriteStorageSettigs[BF]: existence
feature WriteStorageSettigs[BF]: existence
    action set_flag:
        android.provider.Settings::put<USB_MASS_STORAGE_ENABLED>;

//feature WriteVibrateSettings[BF]: existence
feature WriteVibrateSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<VIBRATE_ON>, put<HAPTIC_FEEDBACK_ENABLED>;

//feature WriteAudioSettings[BF]: existence
feature WriteAudioSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<VOLUME_ALARM>, put<VOLUME_BLUETOOTH_SCO>, put<VOLUME_MUSIC>,
              put<VOLUME_NOTIFICATION>, put<VOLUME_RING>, put<VOLUME_SYSTEM>, put<VOLUME_VOICE>, put<SOUND_EFFECTS_ENABLED>,
              put<MODE_RINGER_STREAMS_AFFECTED>, put<MUTE_STREAMS_AFFECTED>, put<NOTIFICATION_SOUND>,
              put<APPEND_FOR_LAST_AUDIBLE>;

//feature WriteWifiSettings[BF]: existence
feature WriteWifiSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<WIFI_MAX_DHCP_RETRY_COUNT>, put<WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS>,
              put<WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON>, put<WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY>,
              put<WIFI_NUM_OPEN_NETWORKS_KEPT>, put<WIFI_ON>, put<WIFI_SLEEP_POLICY>, put<WIFI_SLEEP_POLICY_DEFAULT>,
              put<WIFI_SLEEP_POLICY_NEVER>, put<WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED>, put<WIFI_STATIC_DNS1>,
              put<WIFI_STATIC_DNS2>, put<WIFI_STATIC_GATEWAY>, put<WIFI_STATIC_IP>, put<WIFI_STATIC_NETMASK>,
              put<WIFI_USE_STATIC_IP>, put<WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE>, put<WIFI_WATCHDOG_AP_COUNT>,
              put<WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS>, put<WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED>,
              put<WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS>, put<WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT>,
              put<WIFI_WATCHDOG_MAX_AP_CHECKS>, put<WIFI_WATCHDOG_ON>, put<WIFI_WATCHDOG_PING_COUNT>,
              put<WIFI_WATCHDOG_PING_DELAY_MS>, put<WIFI_WATCHDOG_PING_TIMEOUT_MS>;

// netstat features

//feature NetworkCumulativeWifiRxMBytes[BF]: poll[1]
feature Future1[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiRxMBytes;

//feature NetworkInstantaneousWifiRxMBytes[BF]: poll[1]
feature Future2[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiRxMBytes;

//feature NetworkCumulativeWifiRxPackets[BF]: poll[1]
feature Future3[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiRxPackets;

//feature NetworkInstantaneousWifiRxPackets[BF]: poll[1]
feature Future4[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiRxPackets;

//feature NetworkCumulativeWifiTxMBytes[BF]: poll[1]
feature Future5[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiTxMBytes;

//feature NetworkInstantaneousWifiTxMBytes[BF]: poll[1]
feature Future6[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiTxMBytes;

//feature NetworkCumulativeWifiTxPackets[BF]: poll[1]
feature Future7[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiTxPackets;

//feature NetworkInstantaneousWifiTxPackets[BF]: poll[1]
feature Future8[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiTxPackets;

//feature NetworkCumulativeWifiRxTcpMBytes[BF]: poll[1]
feature Future9[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiRxTcpMBytes;

//feature NetworkInstantaneousWifiRxTcpMBytes[BF]: poll[1]
feature Future10[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiRxTcpMBytes;

//feature NetworkCumulativeWifiRxTcpPackets[BF]: poll[1]
feature Future11[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiRxTcpPackets;

//feature NetworkInstantaneousWifiRxTcpPackets[BF]: poll[1]
feature Future12[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiRxTcpPackets;

//feature NetworkCumulativeWifiRxUdpMBytes[BF]: poll[1]
feature Future13[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiRxUdpMBytes;

//feature NetworkInstantaneousWifiRxUdpMBytes[BF]: poll[1]
feature Future14[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiRxUdpMBytes;

//feature NetworkCumulativeWifiRxUdpPackets[BF]: poll[1]
feature Future15[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiRxUdpPackets;

//feature NetworkInstantaneousWifiRxUdpPackets[BF]: poll[1]
feature Future16[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiRxUdpPackets;

//feature NetworkCumulativeWifiRxOtherMBytes[BF]: poll[1]
feature Future17[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiRxOtherMBytes;

//feature NetworkInstantaneousWifiRxOtherMBytes[BF]: poll[1]
feature Future18[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiRxOtherMBytes;

//feature NetworkCumulativeWifiRxOtherPackets[BF]: poll[1]
feature Future19[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiRxOtherPackets;

//feature NetworkInstantaneousWifiRxOtherPackets[BF]: poll[1]
feature Future20[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiRxOtherPackets;

//feature NetworkCumulativeWifiTxTcpMBytes[BF]: poll[1]
feature Future21[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiTxTcpMBytes;

//feature NetworkInstantaneousWifiTxTcpMBytes[BF]: poll[1]
feature Future22[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiTxTcpMBytes;

//feature NetworkCumulativeWifiTxTcpPackets[BF]: poll[1]
feature Future23[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiTxTcpPackets;

//feature NetworkInstantaneousWifiTxTcpPackets[BF]: poll[1]
feature Future24[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiTxTcpPackets;

//feature NetworkCumulativeWifiTxUdpMBytes[BF]: poll[1]
feature Future25[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiTxUdpMBytes;

//feature NetworkInstantaneousWifiTxUdpMBytes[BF]: poll[1]
feature Future26[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiTxUdpMBytes;

//feature NetworkCumulativeWifiTxUdpPackets[BF]: poll[1]
feature Future27[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiTxUdpPackets;

//feature NetworkInstantaneousWifiTxUdpPackets[BF]: poll[1]
feature Future28[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiTxUdpPackets;

//feature NetworkCumulativeWifiTxOtherMBytes[BF]: poll[1]
feature Future29[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiTxOtherMBytes;

//feature NetworkInstantaneousWifiTxOtherMBytes[BF]: poll[1]
feature Future30[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiTxOtherMBytes;

//feature NetworkCumulativeWifiTxOtherPackets[BF]: poll[1]
feature Future31[BF]: poll[1]
    action set_value:
        Poll::setCumulativeWifiTxOtherPackets;

//feature NetworkInstantaneousWifiTxOtherPackets[BF]: poll[1]
feature Future32[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousWifiTxOtherPackets;

//feature NetworkCumulativeMobileRxMBytes[BF]: poll[1]
feature Future33[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileRxMBytes;

//feature NetworkInstantaneousMobileRxMBytes[BF]: poll[1]
feature Future34[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileRxMBytes;

//feature NetworkCumulativeMobileRxPackets[BF]: poll[1]
feature Future35[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileRxPackets;

//feature NetworkInstantaneousMobileRxPackets[BF]: poll[1]
feature Future36[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileRxPackets;

//feature NetworkCumulativeMobileTxMBytes[BF]: poll[1]
feature Future37[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileTxMBytes;

//feature NetworkInstantaneousMobileTxMBytes[BF]: poll[1]
feature Future38[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileTxMBytes;

//feature NetworkCumulativeMobileTxPackets[BF]: poll[1]
feature Future39[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileTxPackets;

//feature NetworkInstantaneousMobileTxPackets[BF]: poll[1]
feature Future40[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileTxPackets;

//feature NetworkCumulativeMobileRxTcpMBytes[BF]: poll[1]
feature Future41[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileRxTcpMBytes;

//feature NetworkInstantaneousMobileRxTcpMBytes[BF]: poll[1]
feature Future42[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileRxTcpMBytes;

//feature NetworkCumulativeMobileRxTcpPackets[BF]: poll[1]
feature Future43[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileRxTcpPackets;

//feature NetworkInstantaneousMobileRxTcpPackets[BF]: poll[1]
feature Future44[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileRxTcpPackets;

//feature NetworkCumulativeMobileRxUdpMBytes[BF]: poll[1]
feature Future45[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileRxUdpMBytes;

//feature NetworkInstantaneousMobileRxUdpMBytes[BF]: poll[1]
feature Future46[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileRxUdpMBytes;

//feature NetworkCumulativeMobileRxUdpPackets[BF]: poll[1]
feature Future47[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileRxUdpPackets;

//feature NetworkInstantaneousMobileRxUdpPackets[BF]: poll[1]
feature Future48[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileRxUdpPackets;

//feature NetworkCumulativeMobileRxOtherMBytes[BF]: poll[1]
feature Future49[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileRxOtherMBytes;

//feature NetworkInstantaneousMobileRxOtherMBytes[BF]: poll[1]
feature Future50[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileRxOtherMBytes;

//feature NetworkCumulativeMobileRxOtherPackets[BF]: poll[1]
feature Future51[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileRxOtherPackets;

//feature NetworkInstantaneousMobileRxOtherPackets[BF]: poll[1]
feature Future52[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileRxOtherPackets;

//feature NetworkCumulativeMobileTxTcpMBytes[BF]: poll[1]
feature Future53[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileTxTcpMBytes;

//feature NetworkInstantaneousMobileTxTcpMBytes[BF]: poll[1]
feature Future54[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileTxTcpMBytes;

//feature NetworkCumulativeMobileTxTcpPackets[BF]: poll[1]
feature Future55[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileTxTcpPackets;

//feature NetworkInstantaneousMobileTxTcpPackets[BF]: poll[1]
feature Future56[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileTxTcpPackets;

//feature NetworkCumulativeMobileTxUdpMBytes[BF]: poll[1]
feature Future57[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileTxUdpMBytes;

//feature NetworkInstantaneousMobileTxUdpMBytes[BF]: poll[1]
feature Future58[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileTxUdpMBytes;

//feature NetworkCumulativeMobileTxUdpPackets[BF]: poll[1]
feature Future59[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileTxUdpPackets;

//feature NetworkInstantaneousMobileTxUdpPackets[BF]: poll[1]
feature Future60[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileTxUdpPackets;

//feature NetworkCumulativeMobileTxOtherMBytes[BF]: poll[1]
feature Future61[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileTxOtherMBytes;

//feature NetworkInstantaneousMobileTxOtherMBytes[BF]: poll[1]
feature Future62[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileTxOtherMBytes;

//feature NetworkCumulativeMobileTxOtherPackets[BF]: poll[1]
feature Future63[BF]: poll[1]
    action set_value:
        Poll::setCumulativeMobileTxOtherPackets;

//feature NetworkInstantaneousMobileTxOtherPackets[BF]: poll[1]
feature Future64[BF]: poll[1]
    action set_value:
        Poll::setInstantaneousMobileTxOtherPackets;

// tcp socket features

//feature NetworkNumSockets: poll[1]
feature Future65: poll[1]
    action set_value:
        Poll::setNumSockets;

//feature NetworkNumTcpStateListen: poll[1]
feature Future66: poll[1]
    action set_value:
        Poll::setNumTcpStateListen;

//feature NetworkNumTcpStateEstablished: poll[1]
feature Future67: poll[1]
    action set_value:
        Poll::setNumTcpStateEstablished;

//feature NetworkNumLocalIp: poll[1]
feature Future68: poll[1]
    action set_value:
        Poll::setNumLocalIp;

//feature NetworkNumLocalPort: poll[1]
feature Future69: poll[1]
    action set_value:
        Poll::setNumLocalPort;

//feature NetworkNumRemoteIp: poll[1]
feature Future70: poll[1]
    action set_value:
        Poll::setNumRemoteIp;

//feature NetworkNumRemotePort: poll[1]
feature Future71: poll[1]
    action set_value:
        Poll::setNumRemotePort;

//feature NetworkNumRemoteTuple: poll[1]
feature Future72: poll[1]
    action set_value:
        Poll::setNumRemoteTuple;

//feature NetworkNumInode: poll[1]
feature Future73: poll[1]
    action set_value:
        Poll::setNumInode;

//feature BringSelfToForeground[BF]: amount
feature AppPriority1[BF]: amount
    action increment_amount_by_intent_cmp:
        Instrumentation::startActivitySync, execStartActivity, execStartActivitiesAsUser, execStartActivityAsCaller, execStartActivityFromAppTask;

//feature BringSelfToForegroundWithPermissionToKillApps[BF]: amount
feature CanKillOtherApps1[BF]: amount
    action increment_amount_by_intent_cmp_and_permission:
        Instrumentation::startActivitySync, execStartActivity, execStartActivitiesAsUser, execStartActivityAsCaller, execStartActivityFromAppTask;

//feature RequestDeviceAdminPermission: amount
feature RequestDeviceAdminPermission: amount
    action increment_amount_by_intent_act:
        Instrumentation::startActivitySync, execStartActivity, execStartActivitiesAsUser, execStartActivityAsCaller, execStartActivityFromAppTask;

//feature AccelerometerUsage[BF]: duration
feature AccessAccelerometer1[BF]: duration
    action start_counting_sensor1:
        android.hardware.SystemSensorManager::registerListenerImpl;
    action stop_counting_sensor1:
        android.hardware.SystemSensorManager::unregisterListenerImpl;

//feature GyroscopeUsage[BF]: duration
feature AccessGyro1[BF]: duration
    action start_counting_sensor4:
        android.hardware.SystemSensorManager::registerListenerImpl;
    action stop_counting_sensor4:
        android.hardware.SystemSensorManager::unregisterListenerImpl;

//feature StickyWindow[BF]: amount
feature StickyWindow1[BF]: amount
    action increment_amount_by_sticky_window_cmp:
        WindowManagerImpl::addView, updateViewLayout;

//feature FullScreenWindow[BF]: amount
feature FullScreenWindow1[BF]: amount
    action increment_amount_by_full_screen_cmp:
        WindowManagerImpl::addView, updateViewLayout;

//feature NoFocusStickyWindow[BF]: amount
feature StickyWindow2[BF]: amount
    action increment_amount_by_nofocus_sticky_window_cmp:
        WindowManagerImpl::addView, updateViewLayout;

//feature ProcessStateUpdate[BF]: amount
feature Reserved5[BF]: amount
    action increment_amount:
        ActivityManagerService::applyOomAdjLocked;
        ProcessRecord::makeActive, makeInactive;

//feature DeviceOperatorInfo[BF]: amount
feature AccessOperatorInfo1[BF]: amount
    action increment_amount:
        TelephonyManager::getSimSerialNumber, getSubscriberId;

//feature DeviceOperatorInfoComm[BF]: heuristic_or_objmatching
feature ProcessOperatorInfo1[BF]: heuristic_or_objmatching
    action h_move_to_first:
        TelephonyManager::getSimSerialNumber, getSubscriberId;
    action h_move_to_second:
        kernel::sendto[16];
    action obj_move_to_third:
        URL::openConnection;
        URI::URI;
        HttpGet::HttpGet;
        HttpPut::HttpPut;
        HttpPost::HttpPost;

//feature NoUserInteractionBeforeLocation[BF]: order_with_lag[15]
feature AccessLocation2[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        LocationManager::_requestLocationUpdates, addGpsStatusListener, addNmeaListener,
              addProximityAlert, getLastKnownLocation,
              requestLocationUpdates, sendExtraCommand;
        TelephonyManager::getCellLocation, getNeighboringCellInfo;
        GeolocationService::registerForLocationUpdates,
              setEnableGps, start;
        WebChromeClient::onGeolocationPermissionsShowPrompt;
        WifiManager::getScanResults;

//feature NoUserInteractionBeforeDeviceInfo[BF]: order_with_lag[15]
feature AccessDeviceInfo2[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        TelephonyManager::getDeviceId;

//feature NoUserInteractionBeforeDeviceInfoPhoneNumber[BF]: order_with_lag[15]
feature AccessPhoneNumber2[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
        ProcessRecord::makeActive;
    action handle_event:
        TelephonyManager::getLine1Number;

//feature DeviceIdCommDLT[BF]: heuristic_or_objmatching
feature ProcessDeviceInfo2[BF]: heuristic_or_objmatching
    action h_move_to_first:
        TelephonyManager::getDeviceId;
    action obj_move_to_third:
        URL::openConnection;
        URI::URI;
        HttpGet::HttpGet;
        HttpPut::HttpPut;
        HttpPost::HttpPost;

//feature PhoneNumberCommDLT[BF]: heuristic_or_objmatching
feature ProcessPhoneNumber2[BF]: heuristic_or_objmatching
    action h_move_to_first:
        TelephonyManager::getLine1Number;
    action obj_move_to_third:
        URL::openConnection;
        URI::URI;
        HttpGet::HttpGet;
        HttpPut::HttpPut;
        HttpPost::HttpPost;
